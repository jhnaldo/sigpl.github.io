2005

19
1
{
R01
논리를 기반한 접근제어 시스템
신승철

컴퓨터 보안 메카니즘의 하나인 접근제어시스템을 알고리즘 기반 방식이
아닌 논리기반 방식으로 다루는 바업에 대하여 설명한다. 분산시스템을 위한
일반화된 접근제어시스템은 매우 복잡한 질의를 처리해야 하기 때문에
알고리즘 기반 시스템으로 구성하기에는 올바름과 완전함을 보장하기
어렵다. 논리 기반 시스템은 대수 시스템과 양상논리를 이용하여 올바르고
완전한 접근제어시스템을 구현하는 데에 유용하다.
}
{
R02
안전한 소프트웨어 콤포넌트 조합을 위한 논리적 프레임워크
이은영

소프트웨어 콤포넌트를 이용하여 시스템을 구성하는 경우, 서로 다른
버전들과 디지털 서명, 정적인 타입 정보나 네트워크로 전송된 소프트웨어,
그리고 서로 다른 판매자에 의한 콤포넌트들이 혼재함으로 인해서,
콤포넌트를 링크하는 과정은 그다지 간단하지 않을 수도 있다. 링크과정에
적용될 수 있는 정책의 수립이 이러한 복잡함을 해결할 수 있는 좋은 수단이
된다. 본 논문에서는 링크 시 적용될 수 있는 정책을 명시하는데 쓰일 수
있는 프레임워크를 소개한다. 프레임워크 Secure Linking은 “Linking
Logic”이라고 명명한 higher-order logic에 기반하고 있으며, Linking
Logic의 soundness와 modularity는 사용자들이 링크 정책을 세우고 적용하는
것을 용이하게 한다. 본 논문에서는 링크 정책과 증명을 생성하는데 바탕이
되는 Linking Logic을 정의하고, 이를 기반으로 한 프레임워크를
구현하였다. 그리고 구현된 Secure Linking 프레임워크를 이용하여
Microsoft의 .NET에서 사용되는 assembly의 링크 과정을 설명함으로써
Linking Logic이 실제로 사용되는 링크 시스템을 나타낼 수 있을 만큼
풍부한 표현력을 가지고 있음을 증명하였다.
}
{
R03
악성 행위 방지를 위한 프로그램 분석
조은선
	
인터넷의 대중화와 컴퓨터 적용 도메일의 빠른 확장에 따라 침해사고의
피해가 커지고 이에 따라 컴퓨터의 보안은 매우 중요한 주제로
등장하였다. 최근 들어 여러 가지 공격 기법 중에도 피해 컴퓨터에서
명시적/암묵적으로 수행되는 프로그램의 악성 행위에 인한 것이 사고 원인의
많은 부분을 차지하고 있다. 본 고에서는 프로그램의 대한 정적/ 동적
판별을 하여 악성 행위에 대해 대응하는 방법에 살펴본다. 특히 악성
프로그램 수행을 사전에 예방하도록 하는 정적 분석 기법을 중심으로 하여
관련 기술들을 소개한다.
}
{
R04
시멘틱 트리를 이용한 2단계 코드 생성
손윤식, 오세만

최근 컴파일러 이론은 컴파일의 구조를 여러 단계로 분리하여 구성함으로
컴파일러의 부분적인 기능이 개선 가능하고 이식성이 높으며, 모듈별
자동화가 용이한 형태를 추구하고 있다. 그러나 이러한 컴파일러 이론의
정립과는 달리 실제 컴파일러의 구현에는 실질적인 제약이 따른다.  본
논문에서는 이러한 컴파일러 이론 중 의미 분석과 코드 생성 측면을
일반화하여 자동화할 수 있도록 2단계 코드 생성 기법을 제안하고, 이를
위해 구문 분석과 의미 분석 및 코드 생성을 위한 중간 표현으로 AST와
시멘틱 트리를 사용한다. 또한, 이러한 기법을 실제적인 컴파일러 구현에
적용하고 생성된 코드를 검증하여 2단계 코드 생성의 타당성을
확인한다. 2단계 코드 생성 기법은 의미 분석과 코드 생성 과정을 용이하게
만들며, 각 단계의 자동화를 가능하게 해준다.
}
{
T01
다익스트라의 '프로그래밍의 수련(修練)': 열한번째, 몇 가지 작은 예제들의 정형적 처리
김도형

이번 튜토리얼에서는 세 번째로 실제 문제를 다익스트라의 프로그래밍
방법론에 의해 다루는 예제를 보인다. 한 개의 문제를 사용할 것인데,
제곱근의 정수 근사치를 구하는 것이다.
}

X< 편집사
! preface
X>

X 연구논문
<
- R01
- R02
- R03
- R04
>

X 튜토리얼
<
- T01
>

